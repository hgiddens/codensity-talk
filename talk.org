* CODENSITY I guess
** Maybe stuff about Yoneda too
  Hugh Giddens
  @hg_
* LambdaJam 2014
  - Mark gave stream processing workshop
    - So in a way, this is all his fault.
  - Didn't really get to grips well with pipes during the workshop
  - Tried to understand what the hell was going on
  - Found some documentation and read it
    #+BEGIN_QUOTE
    There are three functions that give polynomial time complexity when used in within pipes:
    - sequence
    - replicateM
    - mapM
    …
    The solution is to use the "codensity transformation" to transform the code to
    run with linear time complexity.
    #+END_QUOTE
* Wat
  #+BEGIN_QUOTE
  The solution is to use the "codensity transformation" to transform the code to
  run with linear time complexity.
  #+END_QUOTE
  #+BEGIN_SRC haskell
    quadratic :: Int -> Consumer a m [a]
    quadratic n = replicateM n await
  
    linear :: Monad m => Int -> Consumer a m [a]
    linear n = lowerCodensity $ replicateM n $ lift await
  #+END_SRC

  This is clearly magic
* /Codensity/ in Scalaz
  - There's a /Codensity/ type in Scalaz
  #+BEGIN_SRC scala
    trait Codensity[F[+_], +A] { self =>
      def apply[B](f: A => F[B]): F[B]
      def improve(implicit F: Applicative[F]): F[A] =
        apply(a => F.point(a))
      def flatMap[B](k: A => Codensity[F, B]): Codensity[F, B] = {
        new Codensity[F, B] {
          def apply[C](h: B => F[C]): F[C] = 
            self.apply(a => k(a)(h))
        }
      }
    }
  #+END_SRC
  - I had no idea what this did
* Asymptotic Improvement of Computations over Free Monads
  - A paper by Janis Voigtländer
  #+BEGIN_QUOTE
  Not only do monads allow [us] to safely encapsulate impure features of the
  programming language, but they are also used in pure code to separate
  concerns and provide modular design. But, as usual in software construction,
  modularity comes at a cost, typically with respect to program efficiency. We
  propose a method to improve the efficiency of code over a large variety of
  monads. A distinctive feature is that this method is non-intrusive: it
  preserves the appearance of code, with the obvious software engineering
  benefits.
  #+END_QUOTE
  - This sounds promising!
  - Paper has a nice simple example of the approach, using balanced binary trees
* A /Tree/ type
  - A simple, boring, binary tree data type
  #+BEGIN_SRC scala
    sealed trait Tree[A]
    case class Leaf[A](a: A) extends Tree[A]
    case class Node[A](l: Tree[A], r: Tree[A]) extends Tree[A]
  #+END_SRC
  - With a monad instance, where /bind/ runs a function over the leaf nodes
  #+BEGIN_SRC scala
    implicit object treeMonad extends Monad[Tree] {
      def point[A](a: => A): Tree[A] = Leaf(a)
      def bind[A, B](fa: Tree[A])(f: A => Tree[B]) = fa match {
        case Leaf(a) => f(a)
        case Node(l, r) => Node(bind(l)(f), bind(r)(f))
      }
    }
  #+END_SRC
* A function to generate trees
  #+BEGIN_SRC scala
    def fullTree(i: Int): Tree[Int] = i match {
      case 1 => Leaf(1)
      case n =>
        val j = n - 1
        fullTree(j).flatMap { t =>
          Node(Leaf(j - t), Leaf(t + 1))
        }
    }
  #+END_SRC

  This function will generate trees of the following form:
  #+BEGIN_SRC scala
    Leaf(1) // i = 1
    Node(
      Leaf(0), Leaf(2)) // i = 2
    Node(
      Node(
        Leaf(2), Leaf(1)),
      Node(
        Leaf(0), Leaf(3))) // i = 3
    // And so on
  #+END_SRC
* The thing about creating trees with 2^n nodes
  - It turns out that, given a large n, it can take quite a while to create a tree with 2^n nodes.
  - The Haskell examples in the paper don't exhibit this problem due to lazy evaluation
  - We can use call-by-name to fix this
** We had
   #+BEGIN_SRC scala
     case class Node[A](l: Tree[A], r: Tree[A]) extends Tree[A]
   #+END_SRC
** We'll instead use
   #+BEGIN_SRC scala
     class Node[A](_l: => Tree[A], _r: => Tree[A]) extends Tree[A] {
       lazy val l = _l
       lazy val r = _r
     }
   #+END_SRC
* And some function to traverse them
  #+BEGIN_SRC scala
    def zigzag(tree: Tree[Int]): Int = {
      def zig(t: Tree[Int]): Int = t match {
        case Leaf(n) => n
        case n: Node[Int] => zag(n.l)
      }
      def zag(t: Tree[Int]): Int = t match {
        case Leaf(n) => n
        case n: Node[Int] => zig(n.r)
      }
      zig(tree)
    }
  #+END_SRC
* And how does it perform?
  - /zigzag/, for a tree of depth n, needs to look at n nodes
  - and /fullTree/ is constructing things lazily for us
  - so of course, calling /zigzag(fullTree(n))/ our performance is…
* And how does it perform?
  - /zigzag/, for a tree of depth n, needs to look at n nodes
  - and /fullTree/ is constructing things lazily for us
  - so of course, calling /zigzag(fullTree(n))/ our performance is… polynomial.
  [[./tmp/quad-small.png]]
* Moderately sad trombone noise
  - The cost is in building the tree
  - But not due to its final size
  - It's due instead to the repeated creation and destruction of the intermediate trees
* So how can we use Codensity to help us?
  - Uses a typeclass to provide the ‘make a node’ operation
    #+BEGIN_SRC scala
      trait TreeLike[F[_]] {
        def node[A](l: => F[A], r: => F[A]): F[A]
      }
      
      implicit object treeTreeLike extends TreeLike[Tree] {
        def node[A](l: => Tree[A], r: => Tree[A]): Tree[A] =
          new Node(l, r)
      }
    #+END_SRC
* So how can we use Codensity to help us?
  - Using our new type class, make /fullTree/ generate a full tree of some
    abstract type
    #+BEGIN_SRC scala
      def fullTree[F[_]: Monad](i: Int)(implicit FT: TreeLike[F]): F[Int] =
        i match {
          case 1 => 1.point[F]
          case n =>
            val j = n - 1
            fullTree[F](j).flatMap { t =>
              FT.node((j - 1).point[F], (j + 1).point[F])
            }
        }
      
    #+END_SRC
  - A quick test here demonstrates that /zigzag(fullTree[Tree](n))/ still
    behaves polynomialally
* So how can we use Codensity to help us?
  - Make a type alias for our /Codensity/-using tree
    #+BEGIN_SRC scala
      type CodensityTree[A] = Codensity[Tree, A]
    #+END_SRC
  - Define a /TreeLike/ instance for /CodensityTree/
    #+BEGIN_SRC scala
      implicit object codensityTreeTreeLike extends TreeLike[CodensityTree] {
        def node[A](l: => CodensityTree[A], r: => CodensityTree[A]): CodensityTree[A] =
          new Codensity[Tree, A] {
            def apply[B](f: A => Tree[B]) =
              new Node(l.apply(f), r.apply(f))
          }
      }
    #+END_SRC
* So how can we use Codensity to help us?
  - Now, we can call /fullTree[CodensityTree](n)/, and get a
    /Codensity[Tree, Int]/ back
  - But /zigzag/ needs one of our original /Tree[Int]/ values.
  - Time for the promisingly named method /improve/:
    #+BEGIN_SRC scala
    trait Codensity[F[_], A] {
      def improve(implicit F: Applicative[F]): F[A] =
        apply(a => F.point(a))
    #+END_SRC
  - And when we run /zigzag(fullTree[CodensityTree](n).improve)/ …
* So how can we use Codensity to help us?
  - Now, we can call /fullTree[CodensityTree](n)/, and get a
    /Codensity[Tree, Int]/ back
  - But /zigzag/ needs one of our original /Tree[Int]/ values.
  - Time for the promisingly named method /improve/:
    #+BEGIN_SRC scala
    trait Codensity[F[_], A] {
      def improve(implicit F: Applicative[F]): F[A] =
        apply(a => F.point(a))
    #+END_SRC
  - And when we run /zigzag(fullTree[CodensityTree](n).improve)/ we see that
    we do, indeed, get linear performance:
    [[./tmp/linear-small.png]]
* So how can we use Codensity to help us
  As promised, we didn't have to change the implementation of /fullTree/ (after we'd made it generic in the type of tree that it constructs). The constant factors are ok too:
  [[./tmp/all-small.png]]
* How does this work?
** Original version
  - Would lazily create leaves
    - …and then throw them - and their parents - away when the were replaced by nodes (via /flatMap/).

** Codensity
  - The 'leaves' of the tree are now tree constructors
    /(Int => Tree[B]) => Tree[B]/
  - Will eventually be called by calling improve.
  - to build a /CodensityTree/ of depth n:
    n /CodensityTree/ instances
  - to subsequently run /zigzag(t.improve)/
    n /CodensityTree/ instances
    (n - 1) /Node/ instances
    1 /Leaf/ instance
* Makes binds right-associative
  - One consequence of using /Codensity/ is that it makes binds right associative
  - For example
    #+BEGIN_SRC scala
      // ‘Left associative binds’ are easier to write, but here creates and destroys
      // intermediate data structures unnecessarily:
      List(1,2).flatMap(fn_a).flatMap(fn_b)
      
      // Right associative binds are a little easier on the garbage collector, but a
      // little less pleasant to write:
      List(1,2).flatMap(x => fn_a(x).flatMap(fn_b))
      
      // This performs the binds in the right associative fashion as with the second
      // example above without requiring the binds be written right-associatively
      Codensity.rep(List(1,2)).flatMap(fn_a).flatMap(fn_b).improve
    #+END_SRC
  - This is a safe transformation thanks to the monad laws!
  - So can create problems for ‘monads’ that don't follow them e.g. /ListT/
    in Haskell.
  - NB: the /flatMap/ calls that Scala's for comprehensions desugar into are
    right-associative.
* fmap fusion
  #+BEGIN_SRC scala
    // Similarly to bind, repeated map calls can also lead to the excessive
    // creation and destruction of intermediate data structures.
    //
    // After each map call here an intermediate list is generated only to shortly
    // become garbage.
    List(1,2).map(foo).map(bar).map(baz)
    
    // This can be avoided by composing the functions:
    List(1,2).map(foo.map(bar).map(baz))
    
    // Codensity ‘fuses’ the mapped functions together, such that this behaves as
    // the example above.
    Codensity.rep(List(1,2)).map(foo).map(bar).map(baz).improve
  #+END_SRC
  
  - Use this to create a /Functor[Codensity[Set, _]]/ and amuse and/or dismay
    your friends!
  - This can also achieved via the simpler Yoneda lemma
* Real world examples
  - As hinted at by the title of the paper, this can be especially helpful
    with code that makes heavy use of the free monad
  - Haskell's pipes library uses this to avoid polynomial space growth when
    buiding lists from streams
* Free monads
  - Can be especially helpful with Free monads
    - The (potentially) long chains of Wrap (aka Suspend) operations need to be recreated for every bind
  - This is less true for Scalaz than Haskell
    - As Mark spotted last time, the Gosub hack used in the Free implementation in Scalaz makes binds right-associative thus solving this problem
    - Still useful in Haskell
* Simple example
  #+BEGIN_SRC scala
    trait FreeLike[M[_[_], _]] {
      implicit def monad[F[_]: Functor]: Monad[({ type l[a] = M[F, a] })#l]
      def liftFree[F[_]: Functor, A](fa: F[A]): M[F, A]
    }
    def users: List[Username]
    def go[F[_[_],_]: MonadFree, M[_]: Applicative](n: Int): F[M, List[User]] = {
      import F.monad
      users(n).traverseU(username => F.liftFree(userDetails[M](username)))
    }
  #+END_SRC
* Simple example
  [[./tmp/frees-small.png]]
* Codensity + Free = Yoneda + Rec
  - Ed Kmett has an awesome blog series on this, starting with “Free Monads for Less”
  - He explains that /Codensity (Free f)/ and /Yoneda (Rec f)/ are isomorphic
    - And that because the /Yoneda/ form is ‘smaller’, we should prefer that.

  #+BEGIN_SRC scala
    // The continutation monad
    type Cont[A, B] = (B => A) => A
    
    // The restricted form Ed introduces. Doesn't admit callCC.
    type Rec[F[_], A] = (F[A] => A) => A
  #+END_SRC
* Codensity + Free = Yoneda + Rec
  He defines a type, /F/, that I'm going to call /YY/
  #+BEGIN_SRC scala
  trait YY[F[_], A] {
    def run[B](point: A => B)(flatten: F[B] => B): B
    def retract(implicit F: Monad[F]): F[A] =
      run[F[A]](F.point(_))(F.join(_))
  }
  #+END_SRC
* Codensity + Free = Yoneda + Rec
  It forms a monad:
  #+BEGIN_SRC scala
  implicit def yyMonad[F[_]] = new Monad[({ type l[a] = YY[F, a] })#l] {
    def point[A](a: => A) =
      new YY[F, A] {
        def run[B](point: A => B)(flatten: F[B] => B): B =
          point(a)
      }
    def bind[A,B](fa: YY[F, A])(f: A => YY[F, B]): YY[F, B] =
      new YY[F, B] {
        def run[C](point: B => C)(flatten: F[C] => C): C = {
          val fn: A => C = (a: A) => f(a).run(point)(flatten)
          fa.run(fn)(flatten)
        }
      }
  }  
  #+END_SRC
* Codensity + Free = Yoneda + Rec
  And it's a Church encoding of the free monad
  #+BEGIN_SRC scala
    implicit object yyFreeLike extends MonadFree[YY] {
      def wrap[F[_], A](fa: F[YY[F, A]])(implicit F: Functor[F]): YY[F, A] =
        new YY[F, A] {
          def run[B](point: A => B)(flatten: F[B] => B): B = {
            val faRan: F[B] = F.map(fa)(yy => yy.run(point)(flatten))
            flatten(faRan)
          }
        }
    }
  #+END_SRC
* Codensity + Free = Yoneda + Rec
  - Both of these things are useful in Haskell
    - The /Yoneda/ approach is /Control.Monad.Free.Church.F/ in Hackage
    - And is it says on its tin:
      #+BEGIN_QUOTE
      It is asymptotically more efficient to use (>>=) for F than it is to (>>=) with Free.
      #+END_QUOTE
  - /Codensity/ is less useful in Scalaz
    - Unless you're not using /scalaz.Free/
    - Still useful in non-/Free/ contexts!
* Codensity + Free = Yoneda + Rec
  - Unlike /Codensity/ + /Free/, /YY/ might not be wholly useless in Scala
  - /YY/ doesn't have the /Gosub/ hack
    - so there are computations it can't do that /scalaz.Free/ can.
  - However, you can get computations that /Free#foldMap/ itself will stack overflow on
    - Could always manually trampoline…
    - But /YY/ is much less vulnerable to this problem.
* Links
  - Asymptotic Improvement of Computations over Free Monads, by Janis Voigtländer
    http://www.iai.uni-bonn.de/~jv/mpc08.pdf
  - Ed Kmett has a blog series about this, starting with ‘Free Monads for less’.
    http://comonad.com/reader/2011/free-monads-for-less/
  - This lives on Bitbucket.
    https://bitbucket.org/hgiddens/codensity-talk
  - scalaz-stream
    https://github.com/scalaz/scalaz-stream
  - pipes (for Haskell)
    http://hackage.haskell.org/package/pipes
* Colophon
  This will sort of vaguely work as a presentation via epresent. Unless you
  never need to go back a slide the following might help.

  #+BEGIN_SRC emacs-lisp
    (eval-after-load 'epresent
      '(defadvice epresent-previous-page (around prevent-org-content-running activate)
         "The call to `org-content' breaks `epresent-previous-page' and doesn't seem necessary."
         (flet ((org-content ()))
           ad-do-it)))
  #+END_SRC

  Oh yeah emacs too.
